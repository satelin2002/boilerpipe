<?xml version="1.0" encoding="UTF-8"?>
<!--
    boilerpipe

    Copyright (c) 2009-2011 Christian Kohlschütter

    The author licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<project name="boilerpipe" default="dist" basedir=".">
	<property name="app.name" value="boilerpipe" />
	<property name="app.title" value="boilerpipe content extractor" />
	<property name="app.version" value="1.2.0" />
	<property name="javadoc.version" value="1.2" />
	<property name="app.javaversion" value="1.5" />
	<property name="app.dir" value="." />
	<property name="compile.debug" value="on" />
	<property name="compile.deprecation" value="false" />
	<property name="compile.optimize" value="true" />
	<target name="describe">
		<information>
			<name>${app.name}</name>
			<description>${app.title}</description>
			<version>${app.version}</version>
			<vendor />
			<api>yes</api>
			<documents>no</documents>
			<begin />
			<end />
			<author>Christian Kohlschütter</author>
			<state />
		</information>
	</target>
	<property name="build.dir" value="${app.dir}/build" />
	<property name="build.main" value="${build.dir}/main" />
	<property name="build.extract" value="${build.dir}/extract" />
	<property name="lib.dir" value="${app.dir}/lib" />
	<property name="src.main" value="${app.dir}/src/main" />
	<property name="src.extract" value="${app.dir}/src/code" />
	<property name="dist.dir" value="${app.dir}/dist" />
	<property name="jar.main" value="${dist.dir}/${app.name}-${app.version}.jar" />
	<property name="jar.extract" value="${dist.dir}/${app.name}-extract-${app.version}.jar" />
	<property name="jar.javadoc" value="${dist.dir}/${app.name}-javadoc-${app.version}.jar" />
	<property name="jar.sources" value="${dist.dir}/${app.name}-sources-${app.version}.jar" />
	<property name="javadoc.dir" value="${app.dir}/javadoc/${javadoc.version}/" />
	<property name="distBin.tar.gz" value="${dist.dir}/${app.name}-${app.version}-bin.tar.gz" />
	<property name="distSrc.tar.gz" value="${dist.dir}/${app.name}-${app.version}-src.tar.gz" />
	<path id="classpath.libs">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<path id="dist.jars">
		<fileset dir="${dist.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<path id="classpath.main">
		<dirset dir="${build.dir}">
			<include name="main" />
		</dirset>
		<path refid="classpath.libs" />
	</path>
	<target name="init">
		<delete dir="${build.dir}" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.main}" />
		<mkdir dir="${build.extract}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${app.dir}/javadoc" />
		<mkdir dir="${javadoc.dir}" />
	</target>
	<target name="compile">
		<javac srcdir="${src.main}" includeantruntime="false" destdir="${build.main}" encoding="UTF-8" source="${app.javaversion}" target="${app.javaversion}" debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}" classpathref="classpath.libs" />
		<javac srcdir="${src.extract}" includeantruntime="false" destdir="${build.extract}" encoding="UTF-8" source="${app.javaversion}" target="${app.javaversion}" debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}" classpathref="classpath.main">
			<classpath>
				<pathelement path="${classpath.libs}" />
			</classpath>
		</javac>
	</target>
	<target name="clean">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
		<mkdir dir="${javadoc.dir}" />
		<delete>
			<fileset dir="${javadoc.dir}">
				<include name="**/*.html" />
				<include name="**/*.gif" />
				<include name="**/*.css" />
				<include name="**/*.png" />
				<exclude name="**/.svn/**" />
			</fileset>
		</delete>
	</target>
	<target name="jars" depends="init,compile" description="Makes a distributable jar">
		<jar destfile="${jar.main}">
			<fileset dir="${build.main}">
				<include name="**/*" />
			</fileset>
		</jar>
		<jar destfile="${jar.extract}">
			<fileset dir="${build.extract}">
				<include name="**/*" />
			</fileset>
			<fileset dir="${src.extract}">
				<include name="**/*" />
			</fileset>
		</jar>
		<jar destfile="${jar.javadoc}">
			<fileset dir="${javadoc.dir}">
				<include name="**/*" />
			</fileset>
		</jar>
		<jar destfile="${jar.sources}">
			<fileset dir="${src.main}">
				<include name="**/*" />
			</fileset>
			<fileset dir="${src.extract}">
				<include name="**/*" />
			</fileset>
		</jar>
		<copy todir="${lib.dir}">
			<fileset dir="${dist.dir}">
				<exclude name="**/*.gz" />
			</fileset>
		</copy>
	</target>
	<target name="dist" depends="clean,init,jars">
		<tar destfile="${distBin.tar.gz}" compression="gzip">
			<tarfileset dir="${app.dir}" prefix="${app.name}-${app.version}/">
				<include name="README.txt" />
				<include name="NOTICE.txt" />
				<include name="LICENSE.txt" />
				<include name="javadoc/**" />
				<include name="lib/**" />
			</tarfileset>
			<tarfileset dir="${dist.dir}" prefix="${app.name}-${app.version}/">
				<include name="*.jar" />
			</tarfileset>
		</tar>
		<tar destfile="${distSrc.tar.gz}" compression="gzip">
			<tarfileset dir="." prefix="${app.name}-${app.version}/">
				<include name="README.txt" />
				<include name="NOTICE.txt" />
				<include name="LICENSE.txt" />
				<include name=".project" />
				<include name=".classpath" />
				<include name="src/**" />
				<include name="build.xml" />
			</tarfileset>
		</tar>
	</target>
	<target name="extract" >
		<java classname="de.l3s.boilerpipe.extract.Binocular">
			<arg value="${arg0}" />
			<classpath>
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
			<classpath>
				<pathelement path="${build.extract}" />
				<pathelement path="${classpath.main}" />
				<pathelement path="${classpath.libs}" />
			</classpath>
		</java>
	</target>
</project>
